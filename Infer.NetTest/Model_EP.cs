// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using ProcessSimulator;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2301.301 at 13:56 on Donnerstag, 27. Juni 2024.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_Shift has executed. Set this to false to force re-execution of Changed_Shift</summary>
		public bool Changed_Shift_isDone;
		/// <summary>Message to marginal of 'Initial_Operation_duration_factor'</summary>
		public Gaussian Initial_Operation_duration_factor_marginal_F;
		/// <summary>The constant 'Is_Night_Shift'</summary>
		public bool Is_Night_Shift;
		/// <summary>Message to marginal of 'Is_Night_Shift'</summary>
		public Bernoulli Is_Night_Shift_marginal_F;
		/// <summary>The constant 'Night_Shift_Weekend_Factor'</summary>
		public double Night_Shift_Weekend_Factor;
		/// <summary>Message to marginal of 'Night_Shift_Weekend_Factor'</summary>
		public Gaussian Night_Shift_Weekend_Factor_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'Operation_duration_factor'</summary>
		public Gaussian Operation_duration_factor_marginal_F;
		/// <summary>Field backing the Shift property</summary>
		private Shift Shift_field;
		/// <summary>Message to marginal of 'Shift'</summary>
		public PointMass<Shift> Shift_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'Shift'</summary>
		public Shift Shift
		{
			get {
				return this.Shift_field;
			}
			set {
				if (this.Shift_field!=value) {
					this.Shift_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Shift_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of Shift</summary>
		private void Changed_Shift()
		{
			if (this.Changed_Shift_isDone) {
				return ;
			}
			Gaussian Initial_Operation_duration_factor_F = default(Gaussian);
			this.Initial_Operation_duration_factor_marginal_F = Gaussian.Uniform();
			Gaussian Initial_Operation_duration_factor_use_B = Gaussian.Uniform();
			// Message to 'Initial_Operation_duration_factor' from GaussianFromMeanAndVariance factor
			Initial_Operation_duration_factor_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(1.0, 0.01);
			// Message to 'Initial_Operation_duration_factor_marginal' from Variable factor
			this.Initial_Operation_duration_factor_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(Initial_Operation_duration_factor_use_B, Initial_Operation_duration_factor_F, this.Initial_Operation_duration_factor_marginal_F);
			this.Is_Night_Shift = EnumSupport.AreEqual<Shift>(this.Shift, Shift.Night);
			if (this.Is_Night_Shift) {
				this.Night_Shift_Weekend_Factor = Clone.Copy<double>(1.1000000000000001);
			}
			if (!this.Is_Night_Shift) {
				this.Night_Shift_Weekend_Factor = Clone.Copy<double>(1.0);
			}
			Gaussian Operation_duration_factor_F = default(Gaussian);
			this.Operation_duration_factor_marginal_F = Gaussian.Uniform();
			Gaussian Operation_duration_factor_use_B = Gaussian.Uniform();
			// Message to 'Operation_duration_factor' from Product factor
			Operation_duration_factor_F = GaussianProductOpBase.ProductAverageConditional(Initial_Operation_duration_factor_F, this.Night_Shift_Weekend_Factor);
			// Message to 'Operation_duration_factor_marginal' from DerivedVariable factor
			this.Operation_duration_factor_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(Operation_duration_factor_use_B, Operation_duration_factor_F, this.Operation_duration_factor_marginal_F);
			this.Shift_marginal_F = new PointMass<Shift>(this.Shift);
			// Message to 'Shift_marginal' from DerivedVariable factor
			this.Shift_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Shift>,Shift>(this.Shift, this.Shift_marginal_F);
			this.Night_Shift_Weekend_Factor_marginal_F = Gaussian.Uniform();
			// Message to 'Night_Shift_Weekend_Factor_marginal' from DerivedVariable factor
			this.Night_Shift_Weekend_Factor_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.Night_Shift_Weekend_Factor, this.Night_Shift_Weekend_Factor_marginal_F);
			this.Is_Night_Shift_marginal_F = Bernoulli.Uniform();
			// Message to 'Is_Night_Shift_marginal' from DerivedVariable factor
			this.Is_Night_Shift_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.Is_Night_Shift, this.Is_Night_Shift_marginal_F);
			this.Changed_Shift_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_Shift();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="Shift") {
				return this.Shift;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Initial_Operation_duration_factor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Initial_Operation_duration_factorMarginal()
		{
			return this.Initial_Operation_duration_factor_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Is_Night_Shift' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Is_Night_ShiftMarginal()
		{
			return this.Is_Night_Shift_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Shift") {
				return this.ShiftMarginal();
			}
			if (variableName=="Initial_Operation_duration_factor") {
				return this.Initial_Operation_duration_factorMarginal();
			}
			if (variableName=="Night_Shift_Weekend_Factor") {
				return this.Night_Shift_Weekend_FactorMarginal();
			}
			if (variableName=="Is_Night_Shift") {
				return this.Is_Night_ShiftMarginal();
			}
			if (variableName=="Operation_duration_factor") {
				return this.Operation_duration_factorMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'Night_Shift_Weekend_Factor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Night_Shift_Weekend_FactorMarginal()
		{
			return this.Night_Shift_Weekend_Factor_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'Operation_duration_factor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Operation_duration_factorMarginal()
		{
			return this.Operation_duration_factor_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="Shift") {
				this.Shift = (Shift)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Shift' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Shift> ShiftMarginal()
		{
			return this.Shift_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
